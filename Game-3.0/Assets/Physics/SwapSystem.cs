//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Physics/SwapSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SwapSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SwapSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SwapSystem"",
    ""maps"": [
        {
            ""name"": ""SwapPlayer"",
            ""id"": ""3dec1e83-1611-4fba-abad-fbe0635fb14a"",
            ""actions"": [
                {
                    ""name"": ""Swap"",
                    ""type"": ""Value"",
                    ""id"": ""36a6af6f-dd36-4592-9e01-58845d4d602e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""06d0863e-ada4-4b94-a35f-3bb9844efab6"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SwapPlayer
        m_SwapPlayer = asset.FindActionMap("SwapPlayer", throwIfNotFound: true);
        m_SwapPlayer_Swap = m_SwapPlayer.FindAction("Swap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SwapPlayer
    private readonly InputActionMap m_SwapPlayer;
    private ISwapPlayerActions m_SwapPlayerActionsCallbackInterface;
    private readonly InputAction m_SwapPlayer_Swap;
    public struct SwapPlayerActions
    {
        private @SwapSystem m_Wrapper;
        public SwapPlayerActions(@SwapSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swap => m_Wrapper.m_SwapPlayer_Swap;
        public InputActionMap Get() { return m_Wrapper.m_SwapPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwapPlayerActions set) { return set.Get(); }
        public void SetCallbacks(ISwapPlayerActions instance)
        {
            if (m_Wrapper.m_SwapPlayerActionsCallbackInterface != null)
            {
                @Swap.started -= m_Wrapper.m_SwapPlayerActionsCallbackInterface.OnSwap;
                @Swap.performed -= m_Wrapper.m_SwapPlayerActionsCallbackInterface.OnSwap;
                @Swap.canceled -= m_Wrapper.m_SwapPlayerActionsCallbackInterface.OnSwap;
            }
            m_Wrapper.m_SwapPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Swap.started += instance.OnSwap;
                @Swap.performed += instance.OnSwap;
                @Swap.canceled += instance.OnSwap;
            }
        }
    }
    public SwapPlayerActions @SwapPlayer => new SwapPlayerActions(this);
    public interface ISwapPlayerActions
    {
        void OnSwap(InputAction.CallbackContext context);
    }
}
